apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: anytimefood-ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
spec:
  rules:
  - http:
      paths:
      - path: /menu
        pathType: Prefix
        backend:
          service:
            name: menu-service
            port:
              number: 80
      - path: /order
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 80
      - path: /user
        pathType: Prefix
        backend:
          service:
            name: userinfo-service
            port:
              number: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: anytimefood-ingress-service
# spec:
#   #Creating a service of type load balancer. Load balancer gets created but takes time to reflect
#   type: LoadBalancer
#   selector:
#     app: anytimefood-ingress
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 80

# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: anytimefood-ingress
#   annotations:
# #    ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/ssl-redirect: "false"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - http:
#       paths:
#         - path: /menu
#           backend:
#             serviceName: menu-service
#             servicePort: 80
#         - path: /order
#           backend:
#             serviceName: order-service
#             servicePort: 80
#         - path: /user
#           backend:
#             serviceName: userinfo-service
#             servicePort: 80